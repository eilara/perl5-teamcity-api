{
   "typemap" : {
      "artifact-dependency" : {
         "disabled" : {
            "from" : "propEntity",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "source-buildType" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "buildType"
         },
         "name" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "from" : "propEntity",
            "minOccurs" : "0",
            "is_ref" : 1,
            "is_sequence" : 1
         }
      },
      "entry" : {
         "value" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "newProjectDescription" : {
         "projectsIdsMap" : {
            "from" : "copyOptionsDescription",
            "minOccurs" : "0",
            "type" : "properties",
            "is_sequence" : 1
         },
         "sourceProject" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "project"
         },
         "vcsRootsIdsMap" : {
            "from" : "copyOptionsDescription",
            "minOccurs" : "0",
            "type" : "properties",
            "is_sequence" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "sourceProjectLocator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "copyAllAssociatedSettings" : {
            "from" : "copyOptionsDescription",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "buildTypesIdsMap" : {
            "from" : "copyOptionsDescription",
            "minOccurs" : "0",
            "type" : "properties",
            "is_sequence" : 1
         },
         "parentProject" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "project"
         }
      },
      "files" : {
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "file" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "entries" : {
         "entry" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "long",
            "is_attribute" : 1
         }
      },
      "file" : {
         "parent" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "file-ref"
         },
         "modificationTime" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "from" : "file-ref",
            "type" : "string",
            "is_attribute" : 1
         },
         "content" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "name" : {
            "from" : "file-ref",
            "type" : "string",
            "is_attribute" : 1
         },
         "children" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "size" : {
            "type" : "long",
            "is_attribute" : 1
         }
      },
      "projects" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "project" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "agent-requirements" : {
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "agent-requirement" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "triggers" : {
         "trigger" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "issue" : {
         "url" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "vcsLabeling" : {
         "branchFilter" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "vcsRoots" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "vcs-roots"
         },
         "type" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "labelName" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "copyOptionsDescription" : {
         "projectsIdsMap" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "vcsRootsIdsMap" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "buildTypesIdsMap" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "copyAllAssociatedSettings" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "property" : {
         "value" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "parameterType"
         },
         "own" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "problems" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "problem" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "issueUsage" : {
         "changes" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "changes"
         },
         "issue" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "issue"
         }
      },
      "change" : {
         "locator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "files" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "fileChanges"
         },
         "version" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "date" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "username" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "comment" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "user" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "personal" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "long",
            "is_attribute" : 1
         },
         "vcsRootInstance" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "vcs-root-instance"
         },
         "webUrl" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "agentPools" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "agentPool" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "agents" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "agent" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "properties" : {
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "property" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "problemScope" : {
         "buildTypes" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "project" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "buildType" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "role" : {
         "roleId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "scope" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "snapshot-dependencies" : {
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "snapshot-dependency" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "steps" : {
         "step" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "snapshot-dependency" : {
         "disabled" : {
            "from" : "propEntity",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "source-buildType" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "buildType"
         },
         "name" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "from" : "propEntity",
            "minOccurs" : "0",
            "is_ref" : 1,
            "is_sequence" : 1
         }
      },
      "users" : {
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "user" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "vcs-root-instances" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "vcs-root-instance" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "group" : {
         "child-groups" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "groups"
         },
         "roles" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "users" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "description" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "key" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "parent-groups" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "groups"
         }
      },
      "file-ref" : {
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "fileChange" : {
         "before-revision" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "after-revision" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "relative-file" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "file" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "investigation" : {
         "assignment" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "comment"
         },
         "responsible" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "user"
         },
         "state" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "assignee" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "user"
         },
         "target" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "problemTarget"
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "resolution" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "resolution"
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "scope" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "problemScope"
         }
      },
      "newBuildTypeDescription" : {
         "projectsIdsMap" : {
            "from" : "copyOptionsDescription",
            "minOccurs" : "0",
            "type" : "properties",
            "is_sequence" : 1
         },
         "sourceBuildTypeLocator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcsRootsIdsMap" : {
            "from" : "copyOptionsDescription",
            "minOccurs" : "0",
            "type" : "properties",
            "is_sequence" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "copyAllAssociatedSettings" : {
            "from" : "copyOptionsDescription",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "sourceBuildType" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "buildType"
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "buildTypesIdsMap" : {
            "from" : "copyOptionsDescription",
            "minOccurs" : "0",
            "type" : "properties",
            "is_sequence" : 1
         }
      },
      "mute" : {
         "target" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "problemTarget"
         },
         "assignment" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "comment"
         },
         "resolution" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "resolution"
         },
         "id" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "scope" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "problemScope"
         }
      },
      "testOccurrences" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "newFailed" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "passed" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "muted" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "testOccurrence" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "failed" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "ignored" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "build" : {
         "relatedIssues" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "issuesUsages"
         },
         "locator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "running-info" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "progress-info"
         },
         "finishDate" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "statistics" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "problemOccurrences" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "branchName" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "startEstimate" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "canceledInfo" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "comment"
         },
         "queuedDate" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "buildType" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "state" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "pinned" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "user" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "id" : {
            "type" : "long",
            "is_attribute" : 1
         },
         "lastChanges" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "changes"
         },
         "history" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "buildTypeId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "pinInfo" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "comment"
         },
         "statusText" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "compatibleAgents" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "agents"
         },
         "percentageComplete" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "changes" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "custom-artifact-dependencies" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "artifact-dependencies"
         },
         "startDate" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "attributes" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "entries"
         },
         "triggeringOptions" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "buildTriggeringOptions"
         },
         "revisions" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "revisions"
         },
         "snapshot-dependencies" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "builds"
         },
         "taskId" : {
            "type" : "long",
            "is_attribute" : 1
         },
         "number" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "artifacts" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "files"
         },
         "status" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "artifact-dependencies" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "builds"
         },
         "personal" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "waitReason" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "testOccurrences" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "triggered" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "triggeredBy"
         },
         "running" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "tags" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "comment" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "comment"
         },
         "unspecifiedBranch" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "defaultBranch" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "agent" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "buildTypeInternalId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "webUrl" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "testOccurrence" : {
         "test" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "status" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "firstFailed" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "testOccurrence"
         },
         "currentlyInvestigated" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "mute" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "mute"
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "duration" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "muted" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "ignoreDetails" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "details" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "build" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "nextFixed" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "testOccurrence"
         },
         "ignored" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "currentlyMuted" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "branch" : {
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "default" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "unspecified" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "vcs-root-entries" : {
         "vcs-root-entry" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "tags" : {
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "tag" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "progress-info" : {
         "percentageComplete" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "estimatedTotalSeconds" : {
            "type" : "long",
            "is_attribute" : 1
         },
         "outdated" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "elapsedSeconds" : {
            "type" : "long",
            "is_attribute" : 1
         },
         "currentStageText" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "probablyHanging" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "vcs-root-entry" : {
         "checkout-rules" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "vcs-root" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "builds" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "build" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "vcs-root-instance" : {
         "lastChecked" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "lastVersionInternal" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "status" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "projectLocator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcsRootInternalId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcsName" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "lastVersion" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcs-root" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "vcs-root-id" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "fileChanges" : {
         "file" : {
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1,
            "type" : "fileChange"
         }
      },
      "agent" : {
         "authorized" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "locator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "connected" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "ip" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "typeId" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "uptodate" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "pool" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "agentPool"
         },
         "id" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "enabled" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "test" : {
         "investigations" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "testOccurrences" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "long",
            "is_attribute" : 1
         },
         "mutes" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "investigations" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "investigation" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "agent-requirement" : {
         "disabled" : {
            "from" : "propEntity",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "name" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "from" : "propEntity",
            "minOccurs" : "0",
            "is_ref" : 1,
            "is_sequence" : 1
         }
      },
      "problemOccurrences" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "newFailed" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "passed" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "muted" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "failed" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "ignored" : {
            "from" : "occurrencesSummary",
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "problemOccurrence" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "buildType" : {
         "steps" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "snapshot-dependencies" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "projectInternalId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "investigations" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "internalId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "locator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "project" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "agent-requirements" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "triggers" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "uuid" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "artifact-dependencies" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "projectId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "projectName" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "features" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "template" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "buildType"
         },
         "templateFlag" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcs-root-entries" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "paused" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "description" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "settings" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "parameters" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "builds" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "webUrl" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "feature" : {
         "disabled" : {
            "from" : "propEntity",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "name" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "from" : "propEntity",
            "minOccurs" : "0",
            "is_ref" : 1,
            "is_sequence" : 1
         }
      },
      "step" : {
         "disabled" : {
            "from" : "propEntity",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "name" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "from" : "propEntity",
            "minOccurs" : "0",
            "is_ref" : 1,
            "is_sequence" : 1
         }
      },
      "href" : {
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "user" : {
         "roles" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "lastLogin" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "username" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "email" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "password" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "groups" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "realm" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "long",
            "is_attribute" : 1
         }
      },
      "groups" : {
         "group" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "server" : {
         "buildQueue" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "internalId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "versionMajor" : {
            "type" : "byte",
            "is_attribute" : 1
         },
         "versionMinor" : {
            "type" : "byte",
            "is_attribute" : 1
         },
         "buildNumber" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "buildDate" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "projects" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "users" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "vcsRoots" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "userGroups" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "startTime" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "version" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "agentPools" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "agents" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "builds" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "href"
         },
         "currentTime" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "tag" : {
         "owner" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "user"
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "private" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "triggeredBy" : {
         "rawValue" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "date" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "user" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "type" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "details" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "buildType" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "roles" : {
         "role" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "problemTarget" : {
         "tests" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "anyProblem" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "problems" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "buildTypes" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "buildType" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "buildTriggeringOptions" : {
         "cleanSources" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "rebuildDependencies" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "buildTypes"
         },
         "rebuildAllDependencies" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "queueAtTop" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "parameterType" : {
         "rawValue" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "buildCancelRequest" : {
         "comment" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "readdIntoQueue" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "revision" : {
         "vcs-root-instance" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "version" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "internalVersion" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "changes" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "change" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "resolution" : {
         "time" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "type" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "vcs-root" : {
         "internalId" : {
            "type" : "long",
            "is_attribute" : 1
         },
         "lastChecked" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "locator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "project" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "vcsRootInstances" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "vcs-root-instances"
         },
         "status" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "modificationCheckInterval" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "uuid" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "projectLocator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcsName" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "revisions" : {
         "revision" : {
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1,
            "type" : "revision"
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "issues" : {
         "issue" : {
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1,
            "type" : "issue"
         }
      },
      "plugins" : {
         "plugin" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "trigger" : {
         "disabled" : {
            "from" : "propEntity",
            "type" : "boolean",
            "is_attribute" : 1
         },
         "name" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "from" : "propEntity",
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "from" : "propEntity",
            "minOccurs" : "0",
            "is_ref" : 1,
            "is_sequence" : 1
         }
      },
      "project" : {
         "internalId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "locator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "projects" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "parentProjectInternalId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "uuid" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcsRoots" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "vcs-roots"
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "parentProject" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "project"
         },
         "buildTypes" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "parentProjectId" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "archived" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "description" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "parameters" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "parentProjectName" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "templates" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "buildTypes"
         },
         "webUrl" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "mutes" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "mute" : {
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1,
            "type" : "mute"
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "artifact-dependencies" : {
         "artifact-dependency" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "problem" : {
         "investigations" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "identity" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "problemOccurrences" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "mutes" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "propEntity" : {
         "disabled" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "properties" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "branches" : {
         "branch" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         }
      },
      "agentPool" : {
         "locator" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "projects" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "id" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "agents" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "plugin" : {
         "parameters" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "properties"
         },
         "version" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "name" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "loadPath" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "displayName" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "occurrencesSummary" : {
         "newFailed" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "passed" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "muted" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "failed" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "ignored" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "features" : {
         "feature" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         }
      },
      "issuesUsages" : {
         "issueUsage" : {
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1,
            "type" : "issueUsage"
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "comment" : {
         "timestamp" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "text" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "user" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         }
      },
      "tests" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "test" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "vcs-roots" : {
         "prevHref" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "count" : {
            "type" : "int",
            "is_attribute" : 1
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "vcs-root" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1
         },
         "nextHref" : {
            "type" : "string",
            "is_attribute" : 1
         }
      },
      "problemOccurrence" : {
         "mute" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "mute"
         },
         "muted" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "details" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "build" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "currentlyMuted" : {
            "type" : "boolean",
            "is_attribute" : 1
         },
         "problem" : {
            "is_ref" : 1,
            "minOccurs" : "0",
            "is_sequence" : 1
         },
         "identity" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "additionalData" : {
            "minOccurs" : "0",
            "is_sequence" : 1,
            "type" : "xs:string"
         },
         "href" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "type" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "id" : {
            "type" : "string",
            "is_attribute" : 1
         },
         "currentlyInvestigated" : {
            "type" : "boolean",
            "is_attribute" : 1
         }
      },
      "items" : {
         "item" : {
            "minOccurs" : "0",
            "maxOccurs" : "unbounded",
            "is_sequence" : 1,
            "type" : "xs:string"
         }
      }
   },
   "description" : {
      "base" : "http://tc.maxmind.com:8111",
      "methods" : [
         [
            "/",
            "serveRoot",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/agentPools",
            "getPools",
            "GET",
            "",
            "json:agentPools",
            "fields:string:query",
            ""
         ],
         [
            "",
            "setPools",
            "POST",
            "json:agentPool",
            "json:agentPool",
            "",
            ""
         ],
         [
            "/agentPools/{agentPoolLocator}",
            "deletePool",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "getPool",
            "GET",
            "",
            "json:agentPool",
            "fields:string:query",
            ""
         ],
         [
            "/agentPools/{agentPoolLocator}/agents",
            "getPoolAgents",
            "GET",
            "",
            "json:agents",
            "fields:string:query",
            ""
         ],
         [
            "",
            "addAgent",
            "POST",
            "json:agent",
            "json:agent",
            "fields:string:query",
            "Moves the agent posted to the pool"
         ],
         [
            "/agentPools/{agentPoolLocator}/projects",
            "addProject",
            "POST",
            "json:project",
            "json:project",
            "",
            "Adds the posted project to the pool associated projects"
         ],
         [
            "",
            "getPoolProjects",
            "GET",
            "",
            "json:projects",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceProjects",
            "PUT",
            "json:projects",
            "json:projects",
            "",
            "Associates the posted set of projects with the pool which replaces earlier associations on this pool"
         ],
         [
            "/agentPools/{agentPoolLocator}/projects/{projectLocator}",
            "getPoolProject",
            "GET",
            "",
            "json:project",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deletePoolProject",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/agents",
            "serveAgents",
            "GET",
            "",
            "json:agents",
            "includeDisconnected:boolean:query includeUnauthorized:boolean:query locator:string:query fields:string:query",
            "Returns list of agents"
         ],
         [
            "/agents/{agentLocator}",
            "serveAgent",
            "GET",
            "",
            "json:agent",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteAgent",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/agents/{agentLocator}/pool",
            "getAgentPool",
            "GET",
            "",
            "json:agentPool",
            "fields:string:query",
            ""
         ],
         [
            "",
            "setAgentPool",
            "PUT",
            "json:agentPool",
            "json:agentPool",
            "",
            ""
         ],
         [
            "/agents/{agentLocator}/{field}",
            "setAgentField",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "serveAgentField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/apiVersion",
            "serveApiVersion",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildQueue",
            "deleteBuildsExperimental",
            "DELETE",
            "",
            "",
            "locator:string:query fields:string:query",
            "Experimental! Deletes the set of builds filtered"
         ],
         [
            "",
            "queueNewBuild",
            "POST",
            "json:build",
            "json:build",
            "",
            ""
         ],
         [
            "",
            "getBuilds",
            "GET",
            "",
            "json:builds",
            "locator:string:query fields:string:query",
            "Serves build queue."
         ],
         [
            "",
            "replaceBuilds",
            "PUT",
            "json:builds",
            "json:builds",
            "fields:string:query",
            ""
         ],
         [
            "/buildQueue/{buildLocator}/example/buildCancelRequest",
            "cancelBuild",
            "GET",
            "",
            "json:buildCancelRequest",
            "",
            ""
         ],
         [
            "/buildQueue/{buildLocator}/tags/",
            "replaceTags",
            "PUT",
            "json:tags",
            "json:tags",
            "locator:string:query fields:string:query",
            "Replaces build's tags."
         ],
         [
            "",
            "addTags",
            "POST",
            "json:tags",
            "",
            "",
            "Adds a set of tags to a build"
         ],
         [
            "",
            "addTag",
            "POST",
            "text",
            "text",
            "",
            "Adds a single tag to a build"
         ],
         [
            "",
            "serveTags",
            "GET",
            "",
            "json:tags",
            "locator:string:query fields:string:query",
            ""
         ],
         [
            "/buildQueue/{buildLocator}/{field}",
            "serveBuildFieldByBuildOnly",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildQueue/{queuedBuildLocator}",
            "deleteBuild",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "getBuild",
            "GET",
            "",
            "json:build",
            "fields:string:query",
            ""
         ],
         [
            "",
            "cancelBuild",
            "POST",
            "json:buildCancelRequest",
            "json:build",
            "",
            ""
         ],
         [
            "/buildQueue/{queuedBuildLocator}/compatibleAgents",
            "serveCompatibleAgents",
            "GET",
            "",
            "json:agents",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes",
            "getBuildTypes",
            "GET",
            "",
            "json:buildTypes",
            "locator:string:query fields:string:query",
            "Lists build types registered on the server. Build templates are not included by default"
         ],
         [
            "",
            "addBuildType",
            "POST",
            "json:buildType",
            "json:buildType",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}",
            "deleteBuildType",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "serveBuildTypeXML",
            "GET",
            "",
            "json:buildType",
            "fields:string:query",
            "Serves build configuration or templates according to the locator."
         ],
         [
            "/buildTypes/{btLocator}/agent-requirements",
            "addAgentRequirement",
            "POST",
            "json:agent-requirement",
            "json:agent-requirement",
            "fields:string:query",
            "Creates new agent requirement. 'id' attribute is ignored in the submitted descriptor. Reports error if new requirement cannot be created (e.g. another requirement is present for the parameter)."
         ],
         [
            "",
            "getAgentRequirements",
            "GET",
            "",
            "json:agent-requirements",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceAgentRequirements",
            "PUT",
            "json:agent-requirements",
            "json:agent-requirements",
            "fields:string:query",
            "Replaces agent requirements with those sent in the request."
         ],
         [
            "/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
            "getAgentRequirement",
            "GET",
            "",
            "json:agent-requirement",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceAgentRequirement",
            "PUT",
            "json:agent-requirement",
            "json:agent-requirement",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteAgentRequirement",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/aliases",
            "getAliases",
            "GET",
            "",
            "json:items",
            "",
            "Experimental support only"
         ],
         [
            "/buildTypes/{btLocator}/artifact-dependencies",
            "getArtifactDeps",
            "GET",
            "",
            "json:artifact-dependencies",
            "fields:string:query",
            ""
         ],
         [
            "",
            "addArtifactDep",
            "POST",
            "any:artifact-dependency",
            "json:artifact-dependency",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceArtifactDeps",
            "PUT",
            "json:artifact-dependencies",
            "json:artifact-dependencies",
            "fields:string:query",
            "Replaces the dependencies to those sent in the request."
         ],
         [
            "/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
            "getArtifactDep",
            "GET",
            "",
            "json:artifact-dependency",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceArtifactDep",
            "PUT",
            "any:artifact-dependency",
            "json:artifact-dependency",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteArtifactDep",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/branches",
            "serveBranches",
            "GET",
            "",
            "json:branches",
            "locator:string:query",
            "Lists branches of the build type."
         ],
         [
            "/buildTypes/{btLocator}/buildTags",
            "serveBuildTypeBuildsTags",
            "GET",
            "",
            "json:tags",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/builds",
            "serveBuilds",
            "GET",
            "",
            "json:builds",
            "status:string:query triggeredByUser:string:query includePersonal:boolean:query includeCanceled:boolean:query onlyPinned:boolean:query tag:string:query agentName:string:query sinceBuild:string:query sinceDate:string:query start:long:query count:int:query locator:string:query fields:string:query",
            "Serves builds matching supplied condition."
         ],
         [
            "/buildTypes/{btLocator}/builds/{buildLocator}",
            "serveBuildWithProject",
            "GET",
            "",
            "json:build",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/builds/{buildLocator}/{field}",
            "serveBuildField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/example/newBuildTypeDescription",
            "getExampleNewProjectDescription",
            "GET",
            "",
            "json:newBuildTypeDescription",
            "",
            "Experimental support only. Use this to get an example of the bean to be posted to the /buildTypes request to create a new build type"
         ],
         [
            "/buildTypes/{btLocator}/features",
            "getFeatures",
            "GET",
            "",
            "json:features",
            "fields:string:query",
            ""
         ],
         [
            "",
            "addFeature",
            "POST",
            "any:feature",
            "json:feature",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceFeatures",
            "PUT",
            "json:features",
            "json:features",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/features/{featureId}",
            "getFeature",
            "GET",
            "",
            "json:feature",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceFeature",
            "PUT",
            "any:feature",
            "json:feature",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteFeature",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/features/{featureId}/parameters",
            "replaceFeatureParameters",
            "PUT",
            "json:properties",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "",
            "getFeatureParameters",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}",
            "addFeatureParameter",
            "PUT",
            "any",
            "text",
            "",
            ""
         ],
         [
            "",
            "getFeatureParameter",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/features/{featureId}/{name}",
            "changeFeatureSetting",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "getFeatureSetting",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/investigations",
            "getInvestigations",
            "GET",
            "",
            "json:investigations",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/newBuildTypeDescription",
            "getExampleNewProjectDescriptionCompatibilityVersion1",
            "GET",
            "",
            "json:newBuildTypeDescription",
            "",
            "For compatibility with experimental feature of 8.0"
         ],
         [
            "/buildTypes/{btLocator}/parameters",
            "serveBuildTypeParameters",
            "GET",
            "",
            "json:properties",
            "locator:string:query fields:string:query",
            ""
         ],
         [
            "",
            "setParameter",
            "POST",
            "json:property",
            "json:property",
            "fields:string:query",
            ""
         ],
         [
            "",
            "changeBuildTypeParameters",
            "PUT",
            "json:properties",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteAllBuildTypeParameters",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/parameters/{name}",
            "deleteBuildTypeParameter",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "setParameterValue",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "getParameterValue",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "getParameter",
            "GET",
            "",
            "json:property",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/parameters/{name}/value",
            "getParameterValueLong",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/settings",
            "serveBuildTypeSettings",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceBuildTypeSettings",
            "PUT",
            "json:properties",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/settings/{name}",
            "serveBuildTypeSetting",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "putBuildTypeSetting",
            "PUT",
            "any",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/settingsFile",
            "getSettingsFile",
            "GET",
            "",
            "text",
            "",
            "Experimental support only"
         ],
         [
            "/buildTypes/{btLocator}/snapshot-dependencies",
            "replaceSnapshotDeps",
            "PUT",
            "json:snapshot-dependencies",
            "json:snapshot-dependencies",
            "fields:string:query",
            "Replaces snapshot dependency with those sent in request."
         ],
         [
            "",
            "addSnapshotDep",
            "POST",
            "json:snapshot-dependency",
            "json:snapshot-dependency",
            "fields:string:query",
            "Creates new snapshot dependency. 'id' attribute is ignored in the submitted descriptor. Reports error if new dependency cannot be created (e.g. another dependency on the specified build configuration already exists)."
         ],
         [
            "",
            "getSnapshotDeps",
            "GET",
            "",
            "json:snapshot-dependencies",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
            "getSnapshotDep",
            "GET",
            "",
            "json:snapshot-dependency",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceSnapshotDep",
            "PUT",
            "json:snapshot-dependency",
            "json:snapshot-dependency",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteSnapshotDep",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/steps",
            "getSteps",
            "GET",
            "",
            "json:steps",
            "fields:string:query",
            ""
         ],
         [
            "",
            "addStep",
            "POST",
            "json:step",
            "json:step",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceSteps",
            "PUT",
            "json:steps",
            "json:steps",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/steps/{stepId}",
            "replaceStep",
            "PUT",
            "json:step",
            "json:step",
            "fields:string:query",
            ""
         ],
         [
            "",
            "getStep",
            "GET",
            "",
            "json:step",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteStep",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/steps/{stepId}/parameters",
            "getStepParameters",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceStepParameters",
            "PUT",
            "json:properties",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}",
            "addStepParameter",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "getStepParameter",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/steps/{stepId}/{fieldName}",
            "changeStepSetting",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "getStepSetting",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/template",
            "deleteTemplateAssociation",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "getTemplateAssociation",
            "PUT",
            "text",
            "json:buildType",
            "fields:string:query",
            ""
         ],
         [
            "",
            "serveBuildTypeTemplate",
            "GET",
            "",
            "json:buildType",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/triggers",
            "replaceTriggers",
            "PUT",
            "json:triggers",
            "json:triggers",
            "fields:string:query",
            "Replaces trigger with those sent inthe request."
         ],
         [
            "",
            "getTriggers",
            "GET",
            "",
            "json:triggers",
            "fields:string:query",
            ""
         ],
         [
            "",
            "addTrigger",
            "POST",
            "json:trigger",
            "json:trigger",
            "fields:string:query",
            "Creates new trigger. 'id' attribute is ignored in the submitted descriptor. Reports error if new trigger cannot be created (e.g. only single trigger of the type is allowed for a build configuration)."
         ],
         [
            "/buildTypes/{btLocator}/triggers/{triggerLocator}",
            "getTrigger",
            "GET",
            "",
            "json:trigger",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteTrigger",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "replaceTrigger",
            "PUT",
            "json:trigger",
            "json:trigger",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}",
            "getTriggerSetting",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "changeTriggerSetting",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/vcs-root-entries",
            "replaceVcsRootEntries",
            "PUT",
            "json:vcs-root-entries",
            "json:vcs-root-entries",
            "fields:string:query",
            ""
         ],
         [
            "",
            "getVcsRootEntries",
            "GET",
            "",
            "json:vcs-root-entries",
            "fields:string:query",
            ""
         ],
         [
            "",
            "addVcsRootEntry",
            "POST",
            "json:vcs-root-entry",
            "json:vcs-root-entry",
            "fields:string:query",
            ""
         ],
         [
            "/buildTypes/{btLocator}/vcs-root-entries/{id}",
            "updateVcsRootEntry",
            "PUT",
            "json:vcs-root-entry",
            "json:vcs-root-entry",
            "fields:string:query",
            ""
         ],
         [
            "",
            "getVcsRootEntry",
            "GET",
            "",
            "json:vcs-root-entry",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteVcsRootEntry",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/vcs-root-entries/{id}/checkout-rules",
            "updateVcsRootEntryCheckoutRules",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "getVcsRootEntryCheckoutRules",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/buildTypes/{btLocator}/vcs-root-instances",
            "getCurrentVcsInstances",
            "GET",
            "",
            "json:vcs-root-instances",
            "fields:string:query",
            "Experimental support only!"
         ],
         [
            "/buildTypes/{btLocator}/vcs/files/latest/children{path:(/.*)?}",
            "getVcsFileListing",
            "GET",
            "",
            "json:files",
            "resolveParameters:boolean:query fields:string:query",
            "Lists files in VCS Experimental support only"
         ],
         [
            "/buildTypes/{btLocator}/vcs/files/latest/content{path:(/.*)?}",
            "getVcsFileContent",
            "GET",
            "",
            "any",
            "resolveParameters:boolean:query",
            "Gets content of a file form VCS Experimental support only"
         ],
         [
            "/buildTypes/{btLocator}/vcs/files/latest/metadata{path:(/.*)?}",
            "getVcsFile",
            "GET",
            "",
            "json:file",
            "resolveParameters:boolean:query",
            "Gets VCS file details Experimental support only"
         ],
         [
            "/buildTypes/{btLocator}/vcsLabeling",
            "getVCSLabelingOptions",
            "GET",
            "",
            "json:vcsLabeling",
            "",
            "Gets VCS labeling settings Experimental support only"
         ],
         [
            "",
            "setVCSLabelingOptions",
            "PUT",
            "json:vcsLabeling",
            "json:vcsLabeling",
            "",
            "Sets VCS labeling settings Experimental support only"
         ],
         [
            "/buildTypes/{btLocator}/{field}",
            "serveBuildTypeField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "setBuildTypeField",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "/builds",
            "serveAllBuilds",
            "GET",
            "",
            "json:builds",
            "buildType:string:query status:string:query triggeredByUser:string:query includePersonal:boolean:query includeCanceled:boolean:query onlyPinned:boolean:query tag:string:query agentName:string:query sinceBuild:string:query sinceDate:string:query start:long:query count:int:query locator:string:query fields:string:query",
            "Serves builds matching supplied condition."
         ],
         [
            "",
            "deleteBuilds",
            "DELETE",
            "",
            "",
            "locator:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}",
            "serveBuild",
            "GET",
            "",
            "json:build",
            "fields:string:query",
            "Serves a build described by the locator provided searching through those accessible by the current user. See {@link jetbrains.buildServer.server.rest.request.BuildRequest#serveAllBuilds(String, String, String, boolean, boolean, boolean, java.util.List, String, String, String, Long, Integer, String, javax.ws.rs.core.UriInfo, javax.servlet.http.HttpServletRequest)} If several builds are matched, the first one is used (the effect is the same as if \",count:1\" locator dimension is added)"
         ],
         [
            "",
            "deleteBuild",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "cancelBuild",
            "POST",
            "json:buildCancelRequest",
            "any:build",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/artifacts/archived{path:(/.*)?}",
            "getZippedArtifacts",
            "GET",
            "",
            "any",
            "locator:string:query name:string:query resolveParameters:boolean:query logBuildUsage:boolean:query",
            "Experimental"
         ],
         [
            "/builds/{buildLocator}/artifacts/children{path:(/.*)?}",
            "getArtifactChildren",
            "GET",
            "",
            "json:files",
            "resolveParameters:boolean:query locator:string:query fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/artifacts/content{path:(/.*)?}",
            "getArtifactContent",
            "GET",
            "",
            "any",
            "resolveParameters:boolean:query logBuildUsage:boolean:query",
            ""
         ],
         [
            "/builds/{buildLocator}/artifacts/files{path:(/.*)?}",
            "getArtifactFilesContent",
            "GET",
            "",
            "any",
            "",
            ""
         ],
         [
            "/builds/{buildLocator}/artifacts/metadata{path:(/.*)?}",
            "getArtifactMetadata",
            "GET",
            "",
            "json:file",
            "resolveParameters:boolean:query locator:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/artifactsDirectory",
            "getArtifactsDirectory",
            "GET",
            "",
            "text",
            "",
            "Experimental support only"
         ],
         [
            "/builds/{buildLocator}/artifacts{path:(/.*)?}",
            "getArtifacts",
            "GET",
            "",
            "json:files",
            "resolveParameters:boolean:query locator:string:query fields:string:query",
            "More user-friendly URL for \"/{buildLocator}/artifacts/children\" one."
         ],
         [
            "/builds/{buildLocator}/canceledInfo",
            "getCanceledInfo",
            "GET",
            "",
            "json:comment",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/comment",
            "deleteComment",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "replaceComment",
            "PUT",
            "text",
            "",
            "",
            ""
         ],
         [
            "/builds/{buildLocator}/example/buildCancelRequest",
            "cancelBuild",
            "GET",
            "",
            "json:buildCancelRequest",
            "",
            ""
         ],
         [
            "/builds/{buildLocator}/pin/",
            "pinBuild",
            "PUT",
            "text",
            "",
            "",
            "Pins a build"
         ],
         [
            "",
            "unpinBuild",
            "DELETE",
            "text",
            "",
            "",
            "Unpins a build"
         ],
         [
            "",
            "getPinned",
            "GET",
            "",
            "text",
            "",
            "Fetches current build pinned status."
         ],
         [
            "/builds/{buildLocator}/problemOccurrences",
            "getProblems",
            "GET",
            "",
            "json:problemOccurrences",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/related-issues",
            "serveBuildRelatedIssuesOld",
            "GET",
            "",
            "json:issuesUsages",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/relatedIssues",
            "serveBuildRelatedIssues",
            "GET",
            "",
            "json:issuesUsages",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/resulting-properties/",
            "serveBuildActualParameters",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/resulting-properties/{propertyName}",
            "getParameter",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/builds/{buildLocator}/sources/files/{fileName:.+}",
            "serveSourceFile",
            "GET",
            "",
            "any",
            "",
            ""
         ],
         [
            "/builds/{buildLocator}/statistics/",
            "serveBuildStatisticValues",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/statistics/{name}",
            "serveBuildStatisticValue",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/builds/{buildLocator}/statusIcon",
            "serveBuildStatusIcon",
            "GET",
            "",
            "any",
            "",
            ""
         ],
         [
            "/builds/{buildLocator}/tags/",
            "replaceTags",
            "PUT",
            "json:tags",
            "json:tags",
            "locator:string:query fields:string:query",
            "Replaces the build's tags designated by the tags 'locator' to the set of tags passed."
         ],
         [
            "",
            "addTags",
            "POST",
            "json:tags",
            "",
            "",
            "Adds a set of tags to a build"
         ],
         [
            "",
            "addTag",
            "POST",
            "text",
            "text",
            "",
            "Adds a single tag to a build"
         ],
         [
            "",
            "serveTags",
            "GET",
            "",
            "json:tags",
            "locator:string:query fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/testOccurrences",
            "getTests",
            "GET",
            "",
            "json:testOccurrences",
            "fields:string:query",
            ""
         ],
         [
            "/builds/{buildLocator}/{field}",
            "serveBuildFieldByBuildOnly",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/cctray",
            "serveProjectsConvenienceCopy",
            "GET",
            "",
            "json:Projects",
            "locator:string:query",
            ""
         ],
         [
            "/cctray/projects.xml",
            "serveProjects",
            "GET",
            "",
            "json:Projects",
            "locator:string:query",
            ""
         ],
         [
            "/changes",
            "serveChanges",
            "GET",
            "",
            "json:changes",
            "project:string:query buildType:string:query build:string:query vcsRoot:string:query sinceChange:string:query start:long:query count:int:query locator:string:query fields:string:query",
            "Lists changes by the specified locator"
         ],
         [
            "/changes/{changeLocator}",
            "serveChange",
            "GET",
            "",
            "json:change",
            "fields:string:query",
            ""
         ],
         [
            "/changes/{changeLocator}/attributes",
            "getChangeAttributes",
            "GET",
            "",
            "json:entries",
            "",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/buildTypes",
            "getRelatedBuildTypes",
            "GET",
            "",
            "json:buildTypes",
            "fields:string:query",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/duplicates",
            "getChangeDuplicates",
            "GET",
            "",
            "json:changes",
            "fields:string:query",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/firstBuilds",
            "getChangeFirstBuilds",
            "GET",
            "",
            "json:builds",
            "fields:string:query",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/issues",
            "getChangeIssue",
            "GET",
            "",
            "json:issues",
            "",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/parentChanges",
            "getParentChanges",
            "GET",
            "",
            "json:changes",
            "fields:string:query",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/parentRevisions",
            "getChangeParentRevisions",
            "GET",
            "",
            "json:items",
            "",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/vcsRoot",
            "getChangeVCSRoot",
            "GET",
            "",
            "json:vcs-root-instance",
            "fields:string:query",
            ""
         ],
         [
            "/changes/{changeLocator}/vcsRootInstance",
            "getChangeVCSRootInstance",
            "GET",
            "",
            "json:vcs-root-instance",
            "fields:string:query",
            "Experimental support only!"
         ],
         [
            "/changes/{changeLocator}/{field}",
            "getChangeField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/debug/database/query/{query}",
            "executeDBQuery",
            "GET",
            "",
            "text",
            "fieldDelimiter:string:query count:int:query",
            ""
         ],
         [
            "/debug/database/tables",
            "listDBTables",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/debug/memory/dumps",
            "saveMemoryDump",
            "POST",
            "",
            "text",
            "archived:boolean:query",
            "Experimental use only!"
         ],
         [
            "/debug/requestDetails",
            "getRequestDetails",
            "GET",
            "",
            "text",
            "",
            "Experimental use only!"
         ],
         [
            "/debug/threadDump",
            "scheduleCheckingForChanges",
            "GET",
            "",
            "text",
            "lockedMonitors:string:query lockedSynchronizers:string:query",
            "Experimental use only!"
         ],
         [
            "/debug/vcsCheckingForChangesQueue",
            "scheduleCheckingForChanges",
            "POST",
            "",
            "json:vcs-root-instances",
            "locator:string:query fields:string:query",
            "Experimental use only!"
         ],
         [
            "/info",
            "servePluginInfo",
            "GET",
            "",
            "json:plugin",
            "fields:string:query",
            ""
         ],
         [
            "/investigations",
            "getInvestigations",
            "GET",
            "",
            "json:investigations",
            "locator:string:query fields:string:query",
            "Experimental, the requests and results returned will change in future versions!"
         ],
         [
            "/investigations/{investigationLocator}",
            "serveInstance",
            "GET",
            "",
            "json:investigation",
            "fields:string:query",
            ""
         ],
         [
            "/problemOccurrences",
            "getProblems",
            "GET",
            "",
            "json:problemOccurrences",
            "locator:string:query fields:string:query",
            "Experimental, the requests and results returned will change in future versions!"
         ],
         [
            "/problemOccurrences/{problemLocator}",
            "serveInstance",
            "GET",
            "",
            "json:problemOccurrence",
            "fields:string:query",
            ""
         ],
         [
            "/problems",
            "getProblems",
            "GET",
            "",
            "json:problems",
            "locator:string:query fields:string:query",
            "Experimental, the requests and results returned will change in future versions!"
         ],
         [
            "/problems/{problemLocator}",
            "serveInstance",
            "GET",
            "",
            "json:problem",
            "fields:string:query",
            ""
         ],
         [
            "/projects",
            "createEmptyProject",
            "POST",
            "text",
            "json:project",
            "",
            ""
         ],
         [
            "",
            "createProject",
            "POST",
            "json:newProjectDescription",
            "json:project",
            "",
            ""
         ],
         [
            "",
            "serveProjects",
            "GET",
            "",
            "json:projects",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}",
            "deleteProject",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "serveProject",
            "GET",
            "",
            "json:project",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/agentPools",
            "getProjectAgentPools",
            "GET",
            "",
            "json:agentPools",
            "fields:string:query",
            ""
         ],
         [
            "",
            "setProjectAgentPools",
            "POST",
            "json:agentPool",
            "json:agentPool",
            "",
            ""
         ],
         [
            "",
            "",
            "PUT",
            "json:agentPools",
            "json:agentPools",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/agentPools/{agentPoolLocator}",
            "deleteProjectAgentPools",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/projects/{projectLocator}/buildTypes",
            "createEmptyBuildType",
            "POST",
            "text",
            "json:buildType",
            "fields:string:query",
            ""
         ],
         [
            "",
            "serveBuildTypesInProject",
            "GET",
            "",
            "json:buildTypes",
            "fields:string:query",
            ""
         ],
         [
            "",
            "createBuildType",
            "POST",
            "json:newBuildTypeDescription",
            "json:buildType",
            "fields:string:query",
            "Creates a new build configuration by copying existing one."
         ],
         [
            "/projects/{projectLocator}/buildTypes/{btLocator}",
            "serveBuildType",
            "GET",
            "",
            "json:buildType",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/buildTypes/{btLocator}/builds",
            "serveBuilds",
            "GET",
            "",
            "json:builds",
            "status:string:query triggeredByUser:string:query includePersonal:boolean:query includeCanceled:boolean:query onlyPinned:boolean:query tag:string:query agentName:string:query sinceBuild:string:query sinceDate:string:query start:long:query count:int:query locator:string:query fields:string:query",
            "Serves builds matching supplied condition."
         ],
         [
            "/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}",
            "serveBuildWithProject",
            "GET",
            "",
            "json:build",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}/{field}",
            "serveBuildFieldWithProject",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/projects/{projectLocator}/buildTypes/{btLocator}/{field}",
            "serveBuildTypeFieldWithProject",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/projects/{projectLocator}/example/newProjectDescription",
            "getExampleNewProjectDescription",
            "GET",
            "",
            "json:newProjectDescription",
            "id:string:query",
            "Experimental support only. Use this to get an example of the bean to be posted to the /projects request to create a new project"
         ],
         [
            "/projects/{projectLocator}/newProjectDescription",
            "getExampleNewProjectDescriptionCompatibilityVersion1",
            "GET",
            "",
            "json:newProjectDescription",
            "id:string:query",
            "For compatibility with experimental feature of 8.0"
         ],
         [
            "/projects/{projectLocator}/parameters",
            "deleteAllParameters",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "serveParameters",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "",
            "setParameter",
            "POST",
            "json:property",
            "json:property",
            "",
            ""
         ],
         [
            "",
            "changeAllParameters",
            "PUT",
            "json:properties",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/parameters/{name}",
            "putParameter",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "deleteParameter",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "getParameterValue",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "getParameter",
            "GET",
            "",
            "json:property",
            "",
            ""
         ],
         [
            "/projects/{projectLocator}/parameters/{name}/value",
            "getParameterValueLong",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/projects/{projectLocator}/parentProject",
            "setParentProject",
            "PUT",
            "json:project",
            "json:project",
            "",
            ""
         ],
         [
            "",
            "getParentProject",
            "GET",
            "",
            "json:project",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/settingsFile",
            "getSettingsFile",
            "GET",
            "",
            "text",
            "",
            "Experimental support only"
         ],
         [
            "/projects/{projectLocator}/templates",
            "createBuildTypeTemplate",
            "POST",
            "json:newBuildTypeDescription",
            "json:buildType",
            "fields:string:query",
            "Creates a new build configuration template by copying existing one."
         ],
         [
            "",
            "createEmptyBuildTypeTemplate",
            "POST",
            "text",
            "json:buildType",
            "fields:string:query",
            ""
         ],
         [
            "",
            "serveTemplatesInProject",
            "GET",
            "",
            "json:buildTypes",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/templates/{btLocator}",
            "serveBuildTypeTemplates",
            "GET",
            "",
            "json:buildType",
            "fields:string:query",
            ""
         ],
         [
            "/projects/{projectLocator}/{field}",
            "setProjectFiled",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "serveProjectField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/server",
            "serveServerInfo",
            "GET",
            "",
            "json:server",
            "",
            ""
         ],
         [
            "/server/backup",
            "getBackupStatus",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "startBackup",
            "POST",
            "",
            "text",
            "fileName:string:query addTimestamp:boolean:query includeConfigs:boolean:query includeDatabase:boolean:query includeBuildLogs:boolean:query includePersonalChanges:boolean:query includeRunningBuilds:boolean:query includeSupplimentaryData:boolean:query",
            ""
         ],
         [
            "/server/plugins",
            "servePlugins",
            "GET",
            "",
            "json:plugins",
            "fields:string:query",
            ""
         ],
         [
            "/server/{field}",
            "serveServerVersion",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/testOccurrences",
            "getTestOccurrences",
            "GET",
            "",
            "json:testOccurrences",
            "locator:string:query fields:string:query",
            "Experimental, the requests and results returned will change in future versions!"
         ],
         [
            "/testOccurrences/{testLocator}",
            "serveInstance",
            "GET",
            "",
            "json:testOccurrence",
            "fields:string:query",
            ""
         ],
         [
            "/tests",
            "getTests",
            "GET",
            "",
            "json:tests",
            "locator:string:query fields:string:query",
            "Experimental, the requests and results returned will change in future versions!"
         ],
         [
            "/tests/{testLocator}",
            "serveInstance",
            "GET",
            "",
            "json:test",
            "fields:string:query",
            ""
         ],
         [
            "/userGroups",
            "addGroup",
            "POST",
            "json:group",
            "json:group",
            "fields:string:query",
            ""
         ],
         [
            "",
            "serveGroups",
            "GET",
            "",
            "json:groups",
            "fields:string:query",
            ""
         ],
         [
            "/userGroups/{groupLocator}",
            "serveGroup",
            "GET",
            "",
            "json:group",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteGroup",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/userGroups/{groupLocator}/properties",
            "getProperties",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/userGroups/{groupLocator}/properties/{name}",
            "putUserProperty",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "serveUserProperties",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "removeUserProperty",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/userGroups/{groupLocator}/roles",
            "listRoles",
            "GET",
            "",
            "json:roles",
            "",
            ""
         ],
         [
            "",
            "addRole",
            "POST",
            "json:role",
            "json:role",
            "",
            ""
         ],
         [
            "",
            "addRolePut",
            "PUT",
            "json:roles",
            "json:roles",
            "",
            ""
         ],
         [
            "/userGroups/{groupLocator}/roles/{roleId}/{scope}",
            "listRole",
            "GET",
            "",
            "json:role",
            "",
            ""
         ],
         [
            "",
            "addRoleSimple",
            "POST",
            "",
            "json:role",
            "",
            ""
         ],
         [
            "",
            "deleteRole",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/users",
            "createUser",
            "POST",
            "json:user",
            "any:user",
            "fields:string:query",
            ""
         ],
         [
            "",
            "serveUsers",
            "GET",
            "",
            "json:users",
            "fields:string:query",
            ""
         ],
         [
            "/users/{userLocator}",
            "serveUser",
            "GET",
            "",
            "json:user",
            "fields:string:query",
            ""
         ],
         [
            "",
            "updateUser",
            "PUT",
            "json:user",
            "json:user",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteUser",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/users/{userLocator}/groups",
            "getGroups",
            "GET",
            "",
            "json:groups",
            "fields:string:query",
            ""
         ],
         [
            "",
            "addGroup",
            "POST",
            "json:group",
            "json:group",
            "fields:string:query",
            ""
         ],
         [
            "",
            "replaceGroups",
            "PUT",
            "json:groups",
            "json:groups",
            "fields:string:query",
            "Replaces user's roles with the submitted ones"
         ],
         [
            "/users/{userLocator}/properties",
            "serveUserProperties",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/users/{userLocator}/properties/{name}",
            "putUserProperty",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "serveUserProperty",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "removeUserProperty",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/users/{userLocator}/roles",
            "replaceRoles",
            "PUT",
            "json:roles",
            "json:roles",
            "",
            "Replaces user's roles with the submitted ones"
         ],
         [
            "",
            "listRoles",
            "GET",
            "",
            "json:roles",
            "",
            ""
         ],
         [
            "",
            "addRole",
            "POST",
            "json:role",
            "json:role",
            "",
            ""
         ],
         [
            "/users/{userLocator}/roles/{roleId}/{scope}",
            "listRole",
            "GET",
            "",
            "json:role",
            "",
            ""
         ],
         [
            "",
            "addRoleSimplePost",
            "POST",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "addRoleSimple",
            "PUT",
            "",
            "json:role",
            "",
            ""
         ],
         [
            "",
            "deleteRole",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/users/{userLocator}/{field}",
            "setUserField",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "serveUserField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/vcs-root-instances",
            "serveInstances",
            "GET",
            "",
            "json:vcs-root-instances",
            "locator:string:query fields:string:query",
            ""
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}",
            "serveInstance",
            "GET",
            "",
            "json:vcs-root-instance",
            "fields:string:query",
            ""
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/children{path:(/.*)?}",
            "getVcsFileListing",
            "GET",
            "",
            "json:files",
            "fields:string:query",
            "Lists files in VCS Experimental support only"
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/content{path:(/.*)?}",
            "getVcsFileContent",
            "GET",
            "",
            "any",
            "",
            "Gets content of a file form VCS Experimental support only"
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path:(/.*)?}",
            "getVcsFile",
            "GET",
            "",
            "json:file",
            "",
            "Gets VCS file details Experimental support only"
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}/properties",
            "serveRootInstanceProperties",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState",
            "deleteRepositoryState",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "getRepositoryState",
            "GET",
            "",
            "json:entries",
            "",
            ""
         ],
         [
            "",
            "setRepositoryState",
            "PUT",
            "json:entries",
            "json:entries",
            "",
            ""
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate",
            "getRepositoryStateCreationDate",
            "GET",
            "",
            "any",
            "",
            ""
         ],
         [
            "/vcs-root-instances/{vcsRootInstanceLocator}/{field}",
            "setInstanceField",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "deleteInstanceField",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "serveInstanceField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/vcs-roots",
            "addRoot",
            "POST",
            "json:vcs-root",
            "json:vcs-root",
            "fields:string:query",
            ""
         ],
         [
            "",
            "serveRoots",
            "GET",
            "",
            "json:vcs-roots",
            "locator:string:query fields:string:query",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}",
            "serveRoot",
            "GET",
            "",
            "json:vcs-root",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteRoot",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}/instances",
            "serveRootInstances",
            "GET",
            "",
            "json:vcs-root-instances",
            "fields:string:query",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}",
            "serveRootInstance",
            "GET",
            "",
            "json:vcs-root-instance",
            "fields:string:query",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}/properties",
            "serveRootInstanceProperties",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}/{field}",
            "setInstanceField",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "serveInstanceField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}/properties",
            "serveProperties",
            "GET",
            "",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "",
            "changProperties",
            "PUT",
            "json:properties",
            "json:properties",
            "fields:string:query",
            ""
         ],
         [
            "",
            "deleteAllProperties",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}/properties/{name}",
            "putParameter",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "",
            "deleteParameter",
            "DELETE",
            "",
            "",
            "",
            ""
         ],
         [
            "",
            "serveProperty",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/vcs-roots/{vcsRootLocator}/settingsFile",
            "getSettingsFile",
            "GET",
            "",
            "text",
            "",
            "Experimental support only"
         ],
         [
            "/vcs-roots/{vcsRootLocator}/{field}",
            "serveField",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "",
            "setField",
            "PUT",
            "text",
            "text",
            "",
            ""
         ],
         [
            "/version",
            "serveVersion",
            "GET",
            "",
            "text",
            "",
            ""
         ],
         [
            "/{projectLocator}/{btLocator}/{buildLocator}/{field}",
            "serveBuildFieldShort",
            "GET",
            "",
            "text",
            "",
            ""
         ]
      ],
      "prefix" : "/app/rest"
   },
   "entities" : {
      "http://tc.maxmind.com:8111/app/rest/userGroups/{groupLocator}/properties/{name}" : {
         "putUserProperty" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "serveUserProperties" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "removeUserProperty" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcs-root-instances" : {
         "getCurrentVcsInstances" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-instances"
               ],
               "doc" : "Experimental support only!",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users/{userLocator}/{field}" : {
         "setUserField" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "serveUserField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects" : {
         "createEmptyProject" : {
            "POST" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "json",
                  "project"
               ]
            }
         },
         "createProject" : {
            "POST" : {
               "request" : [
                  "json",
                  "newProjectDescription"
               ],
               "response" : [
                  "json",
                  "project"
               ]
            }
         },
         "serveProjects" : {
            "GET" : {
               "response" : [
                  "json",
                  "projects"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/aliases" : {
         "getAliases" : {
            "GET" : {
               "response" : [
                  "json",
                  "items"
               ],
               "doc" : "Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/parentRevisions" : {
         "getChangeParentRevisions" : {
            "GET" : {
               "response" : [
                  "json",
                  "items"
               ],
               "doc" : "Experimental support only!"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}/properties" : {
         "serveRootInstanceProperties" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/resulting-properties/" : {
         "serveBuildActualParameters" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/template" : {
         "getTemplateAssociation" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "json",
                  "buildType"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteTemplateAssociation" : {
            "DELETE" : {}
         },
         "serveBuildTypeTemplate" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildType"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agentPools/{agentPoolLocator}/agents" : {
         "getPoolAgents" : {
            "GET" : {
               "response" : [
                  "json",
                  "agents"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addAgent" : {
            "POST" : {
               "request" : [
                  "json",
                  "agent"
               ],
               "response" : [
                  "json",
                  "agent"
               ],
               "doc" : "Moves the agent posted to the pool",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agentPools/{agentPoolLocator}/projects" : {
         "addProject" : {
            "POST" : {
               "request" : [
                  "json",
                  "project"
               ],
               "response" : [
                  "json",
                  "project"
               ],
               "doc" : "Adds the posted project to the pool associated projects"
            }
         },
         "replaceProjects" : {
            "PUT" : {
               "request" : [
                  "json",
                  "projects"
               ],
               "response" : [
                  "json",
                  "projects"
               ],
               "doc" : "Associates the posted set of projects with the pool which replaces earlier associations on this pool"
            }
         },
         "getPoolProjects" : {
            "GET" : {
               "response" : [
                  "json",
                  "projects"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agentPools" : {
         "setPools" : {
            "POST" : {
               "request" : [
                  "json",
                  "agentPool"
               ],
               "response" : [
                  "json",
                  "agentPool"
               ]
            }
         },
         "getPools" : {
            "GET" : {
               "response" : [
                  "json",
                  "agentPools"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/{field}" : {
         "getChangeField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/server/backup" : {
         "getBackupStatus" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "startBackup" : {
            "POST" : {
               "response" : [
                  "text"
               ],
               "param" : [
                  [
                     "fileName",
                     "string",
                     "query"
                  ],
                  [
                     "addTimestamp",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeConfigs",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeDatabase",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeBuildLogs",
                     "boolean",
                     "query"
                  ],
                  [
                     "includePersonalChanges",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeRunningBuilds",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeSupplimentaryData",
                     "boolean",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}/{field}" : {
         "setInstanceField" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "serveInstanceField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/server/{field}" : {
         "serveServerVersion" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agents/{agentLocator}/{field}" : {
         "setAgentField" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "serveAgentField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/builds/{buildLocator}/{field}" : {
         "serveBuildField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/parentProject" : {
         "setParentProject" : {
            "PUT" : {
               "request" : [
                  "json",
                  "project"
               ],
               "response" : [
                  "json",
                  "project"
               ]
            }
         },
         "getParentProject" : {
            "GET" : {
               "response" : [
                  "json",
                  "project"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/statusIcon" : {
         "serveBuildStatusIcon" : {
            "GET" : {
               "response" : [
                  "any"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcs-root-entries" : {
         "replaceVcsRootEntries" : {
            "PUT" : {
               "request" : [
                  "json",
                  "vcs-root-entries"
               ],
               "response" : [
                  "json",
                  "vcs-root-entries"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "getVcsRootEntries" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-entries"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addVcsRootEntry" : {
            "POST" : {
               "request" : [
                  "json",
                  "vcs-root-entry"
               ],
               "response" : [
                  "json",
                  "vcs-root-entry"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/{field}" : {
         "serveBuildTypeField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "setBuildTypeField" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/buildTypes/{btLocator}" : {
         "serveBuildType" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildType"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/example/buildCancelRequest" : {
         "cancelBuild" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildCancelRequest"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/testOccurrences/{testLocator}" : {
         "serveInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "testOccurrence"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/related-issues" : {
         "serveBuildRelatedIssuesOld" : {
            "GET" : {
               "response" : [
                  "json",
                  "issuesUsages"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/investigations" : {
         "getInvestigations" : {
            "GET" : {
               "response" : [
                  "json",
                  "investigations"
               ],
               "doc" : "Experimental, the requests and results returned will change in future versions!",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/example/newProjectDescription" : {
         "getExampleNewProjectDescription" : {
            "GET" : {
               "response" : [
                  "json",
                  "newProjectDescription"
               ],
               "doc" : "Experimental support only. Use this to get an example of the bean to be posted to the /projects request to create a new project",
               "param" : [
                  [
                     "id",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcs-root-entries/{id}/checkout-rules" : {
         "getVcsRootEntryCheckoutRules" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "updateVcsRootEntryCheckoutRules" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/userGroups/{groupLocator}" : {
         "serveGroup" : {
            "GET" : {
               "response" : [
                  "json",
                  "group"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteGroup" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/artifactsDirectory" : {
         "getArtifactsDirectory" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "doc" : "Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/testOccurrences" : {
         "getTestOccurrences" : {
            "GET" : {
               "response" : [
                  "json",
                  "testOccurrences"
               ],
               "doc" : "Experimental, the requests and results returned will change in future versions!",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/debug/requestDetails" : {
         "getRequestDetails" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "doc" : "Experimental use only!"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/features/{featureId}" : {
         "getFeature" : {
            "GET" : {
               "response" : [
                  "json",
                  "feature"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceFeature" : {
            "PUT" : {
               "request" : [
                  "any",
                  "feature"
               ],
               "response" : [
                  "json",
                  "feature"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteFeature" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}" : {
         "addStepParameter" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "getStepParameter" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/debug/database/query/{query}" : {
         "executeDBQuery" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "param" : [
                  [
                     "fieldDelimiter",
                     "string",
                     "query"
                  ],
                  [
                     "count",
                     "int",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/agent-requirements" : {
         "addAgentRequirement" : {
            "POST" : {
               "request" : [
                  "json",
                  "agent-requirement"
               ],
               "response" : [
                  "json",
                  "agent-requirement"
               ],
               "doc" : "Creates new agent requirement. 'id' attribute is ignored in the submitted descriptor. Reports error if new requirement cannot be created (e.g. another requirement is present for the parameter).",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "getAgentRequirements" : {
            "GET" : {
               "response" : [
                  "json",
                  "agent-requirements"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceAgentRequirements" : {
            "PUT" : {
               "request" : [
                  "json",
                  "agent-requirements"
               ],
               "response" : [
                  "json",
                  "agent-requirements"
               ],
               "doc" : "Replaces agent requirements with those sent in the request.",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes" : {
         "serveChanges" : {
            "GET" : {
               "response" : [
                  "json",
                  "changes"
               ],
               "doc" : "Lists changes by the specified locator",
               "param" : [
                  [
                     "project",
                     "string",
                     "query"
                  ],
                  [
                     "buildType",
                     "string",
                     "query"
                  ],
                  [
                     "build",
                     "string",
                     "query"
                  ],
                  [
                     "vcsRoot",
                     "string",
                     "query"
                  ],
                  [
                     "sinceChange",
                     "string",
                     "query"
                  ],
                  [
                     "start",
                     "long",
                     "query"
                  ],
                  [
                     "count",
                     "int",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/artifact-dependencies" : {
         "getArtifactDeps" : {
            "GET" : {
               "response" : [
                  "json",
                  "artifact-dependencies"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addArtifactDep" : {
            "POST" : {
               "request" : [
                  "any",
                  "artifact-dependency"
               ],
               "response" : [
                  "json",
                  "artifact-dependency"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceArtifactDeps" : {
            "PUT" : {
               "request" : [
                  "json",
                  "artifact-dependencies"
               ],
               "response" : [
                  "json",
                  "artifact-dependencies"
               ],
               "doc" : "Replaces the dependencies to those sent in the request.",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}" : {
         "putParameter" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "deleteParameter" : {
            "DELETE" : {}
         },
         "serveProperty" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/testOccurrences" : {
         "getTests" : {
            "GET" : {
               "response" : [
                  "json",
                  "testOccurrences"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/debug/database/tables" : {
         "listDBTables" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/comment" : {
         "deleteComment" : {
            "DELETE" : {}
         },
         "replaceComment" : {
            "PUT" : {
               "request" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/problems/{problemLocator}" : {
         "serveInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "problem"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/parameters/{name}/value" : {
         "getParameterValueLong" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/properties" : {
         "serveProperties" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "changProperties" : {
            "PUT" : {
               "request" : [
                  "json",
                  "properties"
               ],
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteAllProperties" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}" : {
         "getSnapshotDep" : {
            "GET" : {
               "response" : [
                  "json",
                  "snapshot-dependency"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceSnapshotDep" : {
            "PUT" : {
               "request" : [
                  "json",
                  "snapshot-dependency"
               ],
               "response" : [
                  "json",
                  "snapshot-dependency"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteSnapshotDep" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState" : {
         "deleteRepositoryState" : {
            "DELETE" : {}
         },
         "getRepositoryState" : {
            "GET" : {
               "response" : [
                  "json",
                  "entries"
               ]
            }
         },
         "setRepositoryState" : {
            "PUT" : {
               "request" : [
                  "json",
                  "entries"
               ],
               "response" : [
                  "json",
                  "entries"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/sources/files/{fileName:.+}" : {
         "serveSourceFile" : {
            "GET" : {
               "response" : [
                  "any"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/version" : {
         "serveVersion" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/builds" : {
         "serveBuilds" : {
            "GET" : {
               "response" : [
                  "json",
                  "builds"
               ],
               "doc" : "Serves builds matching supplied condition.",
               "param" : [
                  [
                     "status",
                     "string",
                     "query"
                  ],
                  [
                     "triggeredByUser",
                     "string",
                     "query"
                  ],
                  [
                     "includePersonal",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeCanceled",
                     "boolean",
                     "query"
                  ],
                  [
                     "onlyPinned",
                     "boolean",
                     "query"
                  ],
                  [
                     "tag",
                     "string",
                     "query"
                  ],
                  [
                     "agentName",
                     "string",
                     "query"
                  ],
                  [
                     "sinceBuild",
                     "string",
                     "query"
                  ],
                  [
                     "sinceDate",
                     "string",
                     "query"
                  ],
                  [
                     "start",
                     "long",
                     "query"
                  ],
                  [
                     "count",
                     "int",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/debug/vcsCheckingForChangesQueue" : {
         "scheduleCheckingForChanges" : {
            "POST" : {
               "response" : [
                  "json",
                  "vcs-root-instances"
               ],
               "doc" : "Experimental use only!",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agents/{agentLocator}/pool" : {
         "getAgentPool" : {
            "GET" : {
               "response" : [
                  "json",
                  "agentPool"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "setAgentPool" : {
            "PUT" : {
               "request" : [
                  "json",
                  "agentPool"
               ],
               "response" : [
                  "json",
                  "agentPool"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest" : {
         "serveRoot" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}" : {
         "getParameter" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/example/newBuildTypeDescription" : {
         "getExampleNewProjectDescription" : {
            "GET" : {
               "response" : [
                  "json",
                  "newBuildTypeDescription"
               ],
               "doc" : "Experimental support only. Use this to get an example of the bean to be posted to the /buildTypes request to create a new build type"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/investigations/{investigationLocator}" : {
         "serveInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "investigation"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots" : {
         "addRoot" : {
            "POST" : {
               "request" : [
                  "json",
                  "vcs-root"
               ],
               "response" : [
                  "json",
                  "vcs-root"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "serveRoots" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-roots"
               ],
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/artifacts/files{path:(/.*)?}" : {
         "getArtifactFilesContent" : {
            "GET" : {
               "response" : [
                  "any"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}" : {
         "getArtifactDep" : {
            "GET" : {
               "response" : [
                  "json",
                  "artifact-dependency"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteArtifactDep" : {
            "DELETE" : {}
         },
         "replaceArtifactDep" : {
            "PUT" : {
               "request" : [
                  "any",
                  "artifact-dependency"
               ],
               "response" : [
                  "json",
                  "artifact-dependency"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users/{userLocator}/roles" : {
         "replaceRoles" : {
            "PUT" : {
               "request" : [
                  "json",
                  "roles"
               ],
               "response" : [
                  "json",
                  "roles"
               ],
               "doc" : "Replaces user's roles with the submitted ones"
            }
         },
         "listRoles" : {
            "GET" : {
               "response" : [
                  "json",
                  "roles"
               ]
            }
         },
         "addRole" : {
            "POST" : {
               "request" : [
                  "json",
                  "role"
               ],
               "response" : [
                  "json",
                  "role"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/relatedIssues" : {
         "serveBuildRelatedIssues" : {
            "GET" : {
               "response" : [
                  "json",
                  "issuesUsages"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/tags/" : {
         "replaceTags" : {
            "PUT" : {
               "request" : [
                  "json",
                  "tags"
               ],
               "response" : [
                  "json",
                  "tags"
               ],
               "doc" : "Replaces the build's tags designated by the tags 'locator' to the set of tags passed.",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addTags" : {
            "POST" : {
               "request" : [
                  "json",
                  "tags"
               ],
               "doc" : "Adds a set of tags to a build"
            }
         },
         "addTag" : {
            "POST" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ],
               "doc" : "Adds a single tag to a build"
            }
         },
         "serveTags" : {
            "GET" : {
               "response" : [
                  "json",
                  "tags"
               ],
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/newBuildTypeDescription" : {
         "getExampleNewProjectDescriptionCompatibilityVersion1" : {
            "GET" : {
               "response" : [
                  "json",
                  "newBuildTypeDescription"
               ],
               "doc" : "For compatibility with experimental feature of 8.0"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/children{path:(/.*)?}" : {
         "getVcsFileListing" : {
            "GET" : {
               "response" : [
                  "json",
                  "files"
               ],
               "doc" : "Lists files in VCS Experimental support only",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path:(/.*)?}" : {
         "getVcsFile" : {
            "GET" : {
               "response" : [
                  "json",
                  "file"
               ],
               "doc" : "Gets VCS file details Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcs/files/latest/content{path:(/.*)?}" : {
         "getVcsFileContent" : {
            "GET" : {
               "response" : [
                  "any"
               ],
               "doc" : "Gets content of a file form VCS Experimental support only",
               "param" : [
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/userGroups/{groupLocator}/roles/{roleId}/{scope}" : {
         "listRole" : {
            "GET" : {
               "response" : [
                  "json",
                  "role"
               ]
            }
         },
         "addRoleSimple" : {
            "POST" : {
               "response" : [
                  "json",
                  "role"
               ]
            }
         },
         "deleteRole" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/tests/{testLocator}" : {
         "serveInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "test"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildQueue/{queuedBuildLocator}" : {
         "getBuild" : {
            "GET" : {
               "response" : [
                  "json",
                  "build"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteBuild" : {
            "DELETE" : {}
         },
         "cancelBuild" : {
            "POST" : {
               "request" : [
                  "json",
                  "buildCancelRequest"
               ],
               "response" : [
                  "json",
                  "build"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/issues" : {
         "getChangeIssue" : {
            "GET" : {
               "response" : [
                  "json",
                  "issues"
               ],
               "doc" : "Experimental support only!"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/snapshot-dependencies" : {
         "replaceSnapshotDeps" : {
            "PUT" : {
               "request" : [
                  "json",
                  "snapshot-dependencies"
               ],
               "response" : [
                  "json",
                  "snapshot-dependencies"
               ],
               "doc" : "Replaces snapshot dependency with those sent in request.",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addSnapshotDep" : {
            "POST" : {
               "request" : [
                  "json",
                  "snapshot-dependency"
               ],
               "response" : [
                  "json",
                  "snapshot-dependency"
               ],
               "doc" : "Creates new snapshot dependency. 'id' attribute is ignored in the submitted descriptor. Reports error if new dependency cannot be created (e.g. another dependency on the specified build configuration already exists).",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "getSnapshotDeps" : {
            "GET" : {
               "response" : [
                  "json",
                  "snapshot-dependencies"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/userGroups" : {
         "addGroup" : {
            "POST" : {
               "request" : [
                  "json",
                  "group"
               ],
               "response" : [
                  "json",
                  "group"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "serveGroups" : {
            "GET" : {
               "response" : [
                  "json",
                  "groups"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/tests" : {
         "getTests" : {
            "GET" : {
               "response" : [
                  "json",
                  "tests"
               ],
               "doc" : "Experimental, the requests and results returned will change in future versions!",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes" : {
         "getBuildTypes" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildTypes"
               ],
               "doc" : "Lists build types registered on the server. Build templates are not included by default",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addBuildType" : {
            "POST" : {
               "request" : [
                  "json",
                  "buildType"
               ],
               "response" : [
                  "json",
                  "buildType"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents" : {
         "serveCompatibleAgents" : {
            "GET" : {
               "response" : [
                  "json",
                  "agents"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}" : {
         "getAgentRequirement" : {
            "GET" : {
               "response" : [
                  "json",
                  "agent-requirement"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteAgentRequirement" : {
            "DELETE" : {}
         },
         "replaceAgentRequirement" : {
            "PUT" : {
               "request" : [
                  "json",
                  "agent-requirement"
               ],
               "response" : [
                  "json",
                  "agent-requirement"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}" : {
         "setInstanceField" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "serveInstanceField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "deleteInstanceField" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/steps/{stepId}" : {
         "replaceStep" : {
            "PUT" : {
               "request" : [
                  "json",
                  "step"
               ],
               "response" : [
                  "json",
                  "step"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "getStep" : {
            "GET" : {
               "response" : [
                  "json",
                  "step"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteStep" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/buildTypes" : {
         "getRelatedBuildTypes" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildTypes"
               ],
               "doc" : "Experimental support only!",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/agentPools" : {
         "getProjectAgentPools" : {
            "GET" : {
               "response" : [
                  "json",
                  "agentPools"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "setProjectAgentPools" : {
            "POST" : {
               "request" : [
                  "json",
                  "agentPool"
               ],
               "response" : [
                  "json",
                  "agentPool"
               ]
            },
            "PUT" : {
               "request" : [
                  "json",
                  "agentPools"
               ],
               "response" : [
                  "json",
                  "agentPools"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}" : {
         "getTriggerSetting" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "changeTriggerSetting" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/branches" : {
         "serveBranches" : {
            "GET" : {
               "response" : [
                  "json",
                  "branches"
               ],
               "doc" : "Lists branches of the build type.",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/instances" : {
         "serveRootInstances" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-instances"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/duplicates" : {
         "getChangeDuplicates" : {
            "GET" : {
               "response" : [
                  "json",
                  "changes"
               ],
               "doc" : "Experimental support only!",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/attributes" : {
         "getChangeAttributes" : {
            "GET" : {
               "response" : [
                  "json",
                  "entries"
               ],
               "doc" : "Experimental support only!"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}" : {
         "serveBuildWithProject" : {
            "GET" : {
               "response" : [
                  "json",
                  "build"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/problems" : {
         "getProblems" : {
            "GET" : {
               "response" : [
                  "json",
                  "problems"
               ],
               "doc" : "Experimental, the requests and results returned will change in future versions!",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/artifacts/content{path:(/.*)?}" : {
         "getArtifactContent" : {
            "GET" : {
               "response" : [
                  "any"
               ],
               "param" : [
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ],
                  [
                     "logBuildUsage",
                     "boolean",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agents" : {
         "serveAgents" : {
            "GET" : {
               "response" : [
                  "json",
                  "agents"
               ],
               "doc" : "Returns list of agents",
               "param" : [
                  [
                     "includeDisconnected",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeUnauthorized",
                     "boolean",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/steps" : {
         "getSteps" : {
            "GET" : {
               "response" : [
                  "json",
                  "steps"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addStep" : {
            "POST" : {
               "request" : [
                  "json",
                  "step"
               ],
               "response" : [
                  "json",
                  "step"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceSteps" : {
            "PUT" : {
               "request" : [
                  "json",
                  "steps"
               ],
               "response" : [
                  "json",
                  "steps"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users" : {
         "serveUsers" : {
            "GET" : {
               "response" : [
                  "json",
                  "users"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "createUser" : {
            "POST" : {
               "request" : [
                  "json",
                  "user"
               ],
               "response" : [
                  "any",
                  "user"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}" : {
         "changeFeatureSetting" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "getFeatureSetting" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/{field}" : {
         "serveBuildTypeFieldWithProject" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users/{userLocator}/properties" : {
         "serveUserProperties" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users/{userLocator}/properties/{name}" : {
         "putUserProperty" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "serveUserProperty" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "removeUserProperty" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/parameters" : {
         "deleteAllParameters" : {
            "DELETE" : {}
         },
         "serveParameters" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "changeAllParameters" : {
            "PUT" : {
               "request" : [
                  "json",
                  "properties"
               ],
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "setParameter" : {
            "POST" : {
               "request" : [
                  "json",
                  "property"
               ],
               "response" : [
                  "json",
                  "property"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}/{field}" : {
         "serveBuildFieldWithProject" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/artifacts/children{path:(/.*)?}" : {
         "getArtifactChildren" : {
            "GET" : {
               "response" : [
                  "json",
                  "files"
               ],
               "param" : [
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/cctray" : {
         "serveProjectsConvenienceCopy" : {
            "GET" : {
               "response" : [
                  "json",
                  "Projects"
               ],
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agents/{agentLocator}" : {
         "serveAgent" : {
            "GET" : {
               "response" : [
                  "json",
                  "agent"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteAgent" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcsLabeling" : {
         "getVCSLabelingOptions" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcsLabeling"
               ],
               "doc" : "Gets VCS labeling settings Experimental support only"
            }
         },
         "setVCSLabelingOptions" : {
            "PUT" : {
               "request" : [
                  "json",
                  "vcsLabeling"
               ],
               "response" : [
                  "json",
                  "vcsLabeling"
               ],
               "doc" : "Sets VCS labeling settings Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/server/plugins" : {
         "servePlugins" : {
            "GET" : {
               "response" : [
                  "json",
                  "plugins"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/firstBuilds" : {
         "getChangeFirstBuilds" : {
            "GET" : {
               "response" : [
                  "json",
                  "builds"
               ],
               "doc" : "Experimental support only!",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/debug/memory/dumps" : {
         "saveMemoryDump" : {
            "POST" : {
               "response" : [
                  "text"
               ],
               "doc" : "Experimental use only!",
               "param" : [
                  [
                     "archived",
                     "boolean",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agentPools/{agentPoolLocator}" : {
         "deletePool" : {
            "DELETE" : {}
         },
         "getPool" : {
            "GET" : {
               "response" : [
                  "json",
                  "agentPool"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/canceledInfo" : {
         "getCanceledInfo" : {
            "GET" : {
               "response" : [
                  "json",
                  "comment"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties" : {
         "serveRootInstanceProperties" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}" : {
         "serveBuild" : {
            "GET" : {
               "response" : [
                  "json",
                  "build"
               ],
               "doc" : "Serves a build described by the locator provided searching through those accessible by the current user. See {@link jetbrains.buildServer.server.rest.request.BuildRequest#serveAllBuilds(String, String, String, boolean, boolean, boolean, java.util.List, String, String, String, Long, Integer, String, javax.ws.rs.core.UriInfo, javax.servlet.http.HttpServletRequest)} If several builds are matched, the first one is used (the effect is the same as if \",count:1\" locator dimension is added)",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteBuild" : {
            "DELETE" : {}
         },
         "cancelBuild" : {
            "POST" : {
               "request" : [
                  "json",
                  "buildCancelRequest"
               ],
               "response" : [
                  "any",
                  "build"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds" : {
         "serveAllBuilds" : {
            "GET" : {
               "response" : [
                  "json",
                  "builds"
               ],
               "doc" : "Serves builds matching supplied condition.",
               "param" : [
                  [
                     "buildType",
                     "string",
                     "query"
                  ],
                  [
                     "status",
                     "string",
                     "query"
                  ],
                  [
                     "triggeredByUser",
                     "string",
                     "query"
                  ],
                  [
                     "includePersonal",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeCanceled",
                     "boolean",
                     "query"
                  ],
                  [
                     "onlyPinned",
                     "boolean",
                     "query"
                  ],
                  [
                     "tag",
                     "string",
                     "query"
                  ],
                  [
                     "agentName",
                     "string",
                     "query"
                  ],
                  [
                     "sinceBuild",
                     "string",
                     "query"
                  ],
                  [
                     "sinceDate",
                     "string",
                     "query"
                  ],
                  [
                     "start",
                     "long",
                     "query"
                  ],
                  [
                     "count",
                     "int",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteBuilds" : {
            "DELETE" : {
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcs/files/latest/children{path:(/.*)?}" : {
         "getVcsFileListing" : {
            "GET" : {
               "response" : [
                  "json",
                  "files"
               ],
               "doc" : "Lists files in VCS Experimental support only",
               "param" : [
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/pin/" : {
         "pinBuild" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "doc" : "Pins a build"
            }
         },
         "getPinned" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "doc" : "Fetches current build pinned status."
            }
         },
         "unpinBuild" : {
            "DELETE" : {
               "request" : [
                  "text"
               ],
               "doc" : "Unpins a build"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/apiVersion" : {
         "serveApiVersion" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/artifacts{path:(/.*)?}" : {
         "getArtifacts" : {
            "GET" : {
               "response" : [
                  "json",
                  "files"
               ],
               "doc" : "More user-friendly URL for \"/{buildLocator}/artifacts/children\" one.",
               "param" : [
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/buildTypes" : {
         "createEmptyBuildType" : {
            "POST" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "json",
                  "buildType"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "serveBuildTypesInProject" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildTypes"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "createBuildType" : {
            "POST" : {
               "request" : [
                  "json",
                  "newBuildTypeDescription"
               ],
               "response" : [
                  "json",
                  "buildType"
               ],
               "doc" : "Creates a new build configuration by copying existing one.",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate" : {
         "getRepositoryStateCreationDate" : {
            "GET" : {
               "response" : [
                  "any"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildQueue/{buildLocator}/tags/" : {
         "replaceTags" : {
            "PUT" : {
               "request" : [
                  "json",
                  "tags"
               ],
               "response" : [
                  "json",
                  "tags"
               ],
               "doc" : "Replaces build's tags.",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addTags" : {
            "POST" : {
               "request" : [
                  "json",
                  "tags"
               ],
               "doc" : "Adds a set of tags to a build"
            }
         },
         "addTag" : {
            "POST" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ],
               "doc" : "Adds a single tag to a build"
            }
         },
         "serveTags" : {
            "GET" : {
               "response" : [
                  "json",
                  "tags"
               ],
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/settings/{name}" : {
         "serveBuildTypeSetting" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "putBuildTypeSetting" : {
            "PUT" : {
               "request" : [
                  "any"
               ],
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}" : {
         "deleteProject" : {
            "DELETE" : {}
         },
         "serveProject" : {
            "GET" : {
               "response" : [
                  "json",
                  "project"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/triggers" : {
         "replaceTriggers" : {
            "PUT" : {
               "request" : [
                  "json",
                  "triggers"
               ],
               "response" : [
                  "json",
                  "triggers"
               ],
               "doc" : "Replaces trigger with those sent inthe request.",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addTrigger" : {
            "POST" : {
               "request" : [
                  "json",
                  "trigger"
               ],
               "response" : [
                  "json",
                  "trigger"
               ],
               "doc" : "Creates new trigger. 'id' attribute is ignored in the submitted descriptor. Reports error if new trigger cannot be created (e.g. only single trigger of the type is allowed for a build configuration).",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "getTriggers" : {
            "GET" : {
               "response" : [
                  "json",
                  "triggers"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}" : {
         "addFeatureParameter" : {
            "PUT" : {
               "request" : [
                  "any"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "getFeatureParameter" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/{field}" : {
         "serveField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "setField" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}" : {
         "serveInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-instance"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/info" : {
         "servePluginInfo" : {
            "GET" : {
               "response" : [
                  "json",
                  "plugin"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/settings" : {
         "serveBuildTypeSettings" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceBuildTypeSettings" : {
            "PUT" : {
               "request" : [
                  "json",
                  "properties"
               ],
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/userGroups/{groupLocator}/properties" : {
         "getProperties" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/userGroups/{groupLocator}/roles" : {
         "listRoles" : {
            "GET" : {
               "response" : [
                  "json",
                  "roles"
               ]
            }
         },
         "addRole" : {
            "POST" : {
               "request" : [
                  "json",
                  "role"
               ],
               "response" : [
                  "json",
                  "role"
               ]
            }
         },
         "addRolePut" : {
            "PUT" : {
               "request" : [
                  "json",
                  "roles"
               ],
               "response" : [
                  "json",
                  "roles"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/{field}" : {
         "serveBuildFieldByBuildOnly" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds" : {
         "serveBuilds" : {
            "GET" : {
               "response" : [
                  "json",
                  "builds"
               ],
               "doc" : "Serves builds matching supplied condition.",
               "param" : [
                  [
                     "status",
                     "string",
                     "query"
                  ],
                  [
                     "triggeredByUser",
                     "string",
                     "query"
                  ],
                  [
                     "includePersonal",
                     "boolean",
                     "query"
                  ],
                  [
                     "includeCanceled",
                     "boolean",
                     "query"
                  ],
                  [
                     "onlyPinned",
                     "boolean",
                     "query"
                  ],
                  [
                     "tag",
                     "string",
                     "query"
                  ],
                  [
                     "agentName",
                     "string",
                     "query"
                  ],
                  [
                     "sinceBuild",
                     "string",
                     "query"
                  ],
                  [
                     "sinceDate",
                     "string",
                     "query"
                  ],
                  [
                     "start",
                     "long",
                     "query"
                  ],
                  [
                     "count",
                     "int",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}" : {
         "serveChange" : {
            "GET" : {
               "response" : [
                  "json",
                  "change"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/parameters/{name}" : {
         "deleteBuildTypeParameter" : {
            "DELETE" : {}
         },
         "setParameterValue" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "getParameterValue" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "getParameter" : {
            "GET" : {
               "response" : [
                  "json",
                  "property"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/parentChanges" : {
         "getParentChanges" : {
            "GET" : {
               "response" : [
                  "json",
                  "changes"
               ],
               "doc" : "Experimental support only!",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/{projectLocator}/{btLocator}/{buildLocator}/{field}" : {
         "serveBuildFieldShort" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/buildTags" : {
         "serveBuildTypeBuildsTags" : {
            "GET" : {
               "response" : [
                  "json",
                  "tags"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/cctray/projects.xml" : {
         "serveProjects" : {
            "GET" : {
               "response" : [
                  "json",
                  "Projects"
               ],
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/settingsFile" : {
         "getSettingsFile" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "doc" : "Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/newProjectDescription" : {
         "getExampleNewProjectDescriptionCompatibilityVersion1" : {
            "GET" : {
               "response" : [
                  "json",
                  "newProjectDescription"
               ],
               "doc" : "For compatibility with experimental feature of 8.0",
               "param" : [
                  [
                     "id",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/settingsFile" : {
         "getSettingsFile" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "doc" : "Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}" : {
         "deleteBuildType" : {
            "DELETE" : {}
         },
         "serveBuildTypeXML" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildType"
               ],
               "doc" : "Serves build configuration or templates according to the locator.",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path:(/.*)?}" : {
         "getVcsFile" : {
            "GET" : {
               "response" : [
                  "json",
                  "file"
               ],
               "doc" : "Gets VCS file details Experimental support only",
               "param" : [
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters" : {
         "getStepParameters" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceStepParameters" : {
            "PUT" : {
               "request" : [
                  "json",
                  "properties"
               ],
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/vcsRoot" : {
         "getChangeVCSRoot" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-instance"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildQueue/{buildLocator}/example/buildCancelRequest" : {
         "cancelBuild" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildCancelRequest"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users/{userLocator}/roles/{roleId}/{scope}" : {
         "listRole" : {
            "GET" : {
               "response" : [
                  "json",
                  "role"
               ]
            }
         },
         "addRoleSimplePost" : {
            "POST" : {}
         },
         "addRoleSimple" : {
            "PUT" : {
               "response" : [
                  "json",
                  "role"
               ]
            }
         },
         "deleteRole" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/artifacts/archived{path:(/.*)?}" : {
         "getZippedArtifacts" : {
            "GET" : {
               "response" : [
                  "any"
               ],
               "doc" : "Experimental",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "name",
                     "string",
                     "query"
                  ],
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ],
                  [
                     "logBuildUsage",
                     "boolean",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}" : {
         "deleteProjectAgentPools" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildQueue/{buildLocator}/{field}" : {
         "serveBuildFieldByBuildOnly" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances" : {
         "serveInstances" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-instances"
               ],
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/{field}" : {
         "setProjectFiled" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "serveProjectField" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/problemOccurrences" : {
         "getProblems" : {
            "GET" : {
               "response" : [
                  "json",
                  "problemOccurrences"
               ],
               "doc" : "Experimental, the requests and results returned will change in future versions!",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/debug/threadDump" : {
         "scheduleCheckingForChanges" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "doc" : "Experimental use only!",
               "param" : [
                  [
                     "lockedMonitors",
                     "string",
                     "query"
                  ],
                  [
                     "lockedSynchronizers",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users/{userLocator}/groups" : {
         "getGroups" : {
            "GET" : {
               "response" : [
                  "json",
                  "groups"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addGroup" : {
            "POST" : {
               "request" : [
                  "json",
                  "group"
               ],
               "response" : [
                  "json",
                  "group"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceGroups" : {
            "PUT" : {
               "request" : [
                  "json",
                  "groups"
               ],
               "response" : [
                  "json",
                  "groups"
               ],
               "doc" : "Replaces user's roles with the submitted ones",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/content{path:(/.*)?}" : {
         "getVcsFileContent" : {
            "GET" : {
               "response" : [
                  "any"
               ],
               "doc" : "Gets content of a file form VCS Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters" : {
         "getFeatureParameters" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceFeatureParameters" : {
            "PUT" : {
               "request" : [
                  "json",
                  "properties"
               ],
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/problemOccurrences" : {
         "getProblems" : {
            "GET" : {
               "response" : [
                  "json",
                  "problemOccurrences"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}" : {
         "deleteTrigger" : {
            "DELETE" : {}
         },
         "getTrigger" : {
            "GET" : {
               "response" : [
                  "json",
                  "trigger"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceTrigger" : {
            "PUT" : {
               "request" : [
                  "json",
                  "trigger"
               ],
               "response" : [
                  "json",
                  "trigger"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/statistics/" : {
         "serveBuildStatisticValues" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/artifacts/metadata{path:(/.*)?}" : {
         "getArtifactMetadata" : {
            "GET" : {
               "response" : [
                  "json",
                  "file"
               ],
               "param" : [
                  [
                     "resolveParameters",
                     "boolean",
                     "query"
                  ],
                  [
                     "locator",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/templates/{btLocator}" : {
         "serveBuildTypeTemplates" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildType"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}" : {
         "serveRootInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-instance"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/builds/{buildLocator}" : {
         "serveBuildWithProject" : {
            "GET" : {
               "response" : [
                  "json",
                  "build"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/problemOccurrences/{problemLocator}" : {
         "serveInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "problemOccurrence"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/server" : {
         "serveServerInfo" : {
            "GET" : {
               "response" : [
                  "json",
                  "server"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}/settingsFile" : {
         "getSettingsFile" : {
            "GET" : {
               "response" : [
                  "text"
               ],
               "doc" : "Experimental support only"
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/investigations" : {
         "getInvestigations" : {
            "GET" : {
               "response" : [
                  "json",
                  "investigations"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/features" : {
         "getFeatures" : {
            "GET" : {
               "response" : [
                  "json",
                  "features"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "addFeature" : {
            "POST" : {
               "request" : [
                  "any",
                  "feature"
               ],
               "response" : [
                  "json",
                  "feature"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceFeatures" : {
            "PUT" : {
               "request" : [
                  "json",
                  "features"
               ],
               "response" : [
                  "json",
                  "features"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/vcs-roots/{vcsRootLocator}" : {
         "serveRoot" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteRoot" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/parameters/{name}/value" : {
         "getParameterValueLong" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/parameters" : {
         "serveBuildTypeParameters" : {
            "GET" : {
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "setParameter" : {
            "POST" : {
               "request" : [
                  "json",
                  "property"
               ],
               "response" : [
                  "json",
                  "property"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "changeBuildTypeParameters" : {
            "PUT" : {
               "request" : [
                  "json",
                  "properties"
               ],
               "response" : [
                  "json",
                  "properties"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteAllBuildTypeParameters" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/users/{userLocator}" : {
         "serveUser" : {
            "GET" : {
               "response" : [
                  "json",
                  "user"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "updateUser" : {
            "PUT" : {
               "request" : [
                  "json",
                  "user"
               ],
               "response" : [
                  "json",
                  "user"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteUser" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildQueue" : {
         "deleteBuildsExperimental" : {
            "DELETE" : {
               "doc" : "Experimental! Deletes the set of builds filtered",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "queueNewBuild" : {
            "POST" : {
               "request" : [
                  "json",
                  "build"
               ],
               "response" : [
                  "json",
                  "build"
               ]
            }
         },
         "getBuilds" : {
            "GET" : {
               "response" : [
                  "json",
                  "builds"
               ],
               "doc" : "Serves build queue.",
               "param" : [
                  [
                     "locator",
                     "string",
                     "query"
                  ],
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "replaceBuilds" : {
            "PUT" : {
               "request" : [
                  "json",
                  "builds"
               ],
               "response" : [
                  "json",
                  "builds"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}" : {
         "getPoolProject" : {
            "GET" : {
               "response" : [
                  "json",
                  "project"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deletePoolProject" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/builds/{buildLocator}/statistics/{name}" : {
         "serveBuildStatisticValue" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/parameters/{name}" : {
         "putParameter" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         },
         "deleteParameter" : {
            "DELETE" : {}
         },
         "getParameterValue" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "getParameter" : {
            "GET" : {
               "response" : [
                  "json",
                  "property"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/changes/{changeLocator}/vcsRootInstance" : {
         "getChangeVCSRootInstance" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-instance"
               ],
               "doc" : "Experimental support only!",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}" : {
         "getStepSetting" : {
            "GET" : {
               "response" : [
                  "text"
               ]
            }
         },
         "changeStepSetting" : {
            "PUT" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "text"
               ]
            }
         }
      },
      "http://tc.maxmind.com:8111/app/rest/buildTypes/{btLocator}/vcs-root-entries/{id}" : {
         "updateVcsRootEntry" : {
            "PUT" : {
               "request" : [
                  "json",
                  "vcs-root-entry"
               ],
               "response" : [
                  "json",
                  "vcs-root-entry"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "getVcsRootEntry" : {
            "GET" : {
               "response" : [
                  "json",
                  "vcs-root-entry"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "deleteVcsRootEntry" : {
            "DELETE" : {}
         }
      },
      "http://tc.maxmind.com:8111/app/rest/projects/{projectLocator}/templates" : {
         "createBuildTypeTemplate" : {
            "POST" : {
               "request" : [
                  "json",
                  "newBuildTypeDescription"
               ],
               "response" : [
                  "json",
                  "buildType"
               ],
               "doc" : "Creates a new build configuration template by copying existing one.",
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "createEmptyBuildTypeTemplate" : {
            "POST" : {
               "request" : [
                  "text"
               ],
               "response" : [
                  "json",
                  "buildType"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         },
         "serveTemplatesInProject" : {
            "GET" : {
               "response" : [
                  "json",
                  "buildTypes"
               ],
               "param" : [
                  [
                     "fields",
                     "string",
                     "query"
                  ]
               ]
            }
         }
      }
   }
}
